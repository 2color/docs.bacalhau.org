"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[6524],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=a,m=d["".concat(u,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1774:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_label:"Overview",sidebar_position:100},o="Overview",l={unversionedId:"running-node/index",id:"running-node/index",title:"Overview",description:"Bacalhau is a peer-to-peer network of compute providers that will run jobs submitted by users.",source:"@site/docs/running-node/index.md",sourceDirName:"running-node",slug:"/running-node/",permalink:"/running-node/",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/running-node/index.md",tags:[],version:"current",sidebarPosition:100,frontMatter:{sidebar_label:"Overview",sidebar_position:100},sidebar:"documentationSidebar",previous:{title:"GPU Workloads",permalink:"/getting-started/gpu"},next:{title:"Install",permalink:"/running-node/install"}},u={},s=[{value:"Quick start",id:"quick-start",level:2},{value:"Install bacalhau binary",id:"install-bacalhau-binary",level:3},{value:"Install docker",id:"install-docker",level:3},{value:"Ensure IPFS is running",id:"ensure-ipfs-is-running",level:3},{value:"Configure firewall",id:"configure-firewall",level:3},{value:"Run bacalhau",id:"run-bacalhau",level:3}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"overview"},"Overview"),(0,a.kt)("p",null,"Bacalhau is a peer-to-peer network of compute providers that will run jobs submitted by users."),(0,a.kt)("p",null,"This section will show you how to configure and run a bacalhau node and start accepting and running jobs."),(0,a.kt)("p",null,"You can leap right into the ",(0,a.kt)("a",{parentName:"p",href:"#quickstart"},"quick start")," or you can follow these guides:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"install"},"Install")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"networking"},"Networking")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"storage-providers"},"Storage Providers")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"job-selection"},"Job Selection")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"resource-limits"},"Resource Limits")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"gpu"},"GPU Support"))),(0,a.kt)("h2",{id:"quick-start"},"Quick start"),(0,a.kt)("h3",{id:"install-bacalhau-binary"},"Install bacalhau binary"),(0,a.kt)("p",null,"So we can run ",(0,a.kt)("inlineCode",{parentName:"p"},"bacalhau serve")," - we first need to ",(0,a.kt)("a",{parentName:"p",href:"/getting-started/installation#prerequisite-install-bacalhau-client"},"install the bacalhau binary")),(0,a.kt)("h3",{id:"install-docker"},"Install docker"),(0,a.kt)("p",null,"So we can run docker based workloads - we need to have ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/engine/install/"},"docker installed")," and running."),(0,a.kt)("h3",{id:"ensure-ipfs-is-running"},"Ensure IPFS is running"),(0,a.kt)("p",null,"We will need to connect our bacalhau node to an IPFS server so we can run jobs that consume CIDs as inputs."),(0,a.kt)("p",null,"You can either ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ipfs.tech/install/"},"install IPFS")," and run it locally or you can connect to a remote IPFS server."),(0,a.kt)("p",null,"In both cases - we should have an ",(0,a.kt)("a",{parentName:"p",href:"https://richardschneider.github.io/net-ipfs-core/articles/multiaddress.html"},"IPFS multiaddress")," for our IPFS server that should look something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export IPFS_CONNECT=/ip4/10.1.10.10/tcp/80/p2p/QmVcSqVEsvm5RR9mBLjwpb2XjFVn5bPdPL69mL8PH45pPC\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The multiaddress above is just an example - you need to get the multiaddress of the IPFS server you want to connect to.")),(0,a.kt)("h3",{id:"configure-firewall"},"Configure firewall"),(0,a.kt)("p",null,"To ensure that our node can communicate with other nodes on the network - we need to make sure the ",(0,a.kt)("strong",{parentName:"p"},"1235")," port is open."),(0,a.kt)("h3",{id:"run-bacalhau"},"Run bacalhau"),(0,a.kt)("p",null,"Now we can run our bacalhau node:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau serve \\\n  --ipfs-connect $IPFS_CONNECT\n")))}p.isMDXComponent=!0}}]);