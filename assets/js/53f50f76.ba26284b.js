"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[803],{3905:function(n,e,t){t.d(e,{Zo:function(){return s},kt:function(){return d}});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function p(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var c=a.createContext({}),l=function(n){var e=a.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},s=function(n){var e=l(n.components);return a.createElement(c.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,c=n.parentName,s=p(n,["components","mdxType","originalType","parentName"]),m=l(t),d=r,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(f,i(i({ref:e},s),{},{components:t})):a.createElement(f,i({ref:e},s))}));function d(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,i=new Array(o);i[0]=m;var p={};for(var c in e)hasOwnProperty.call(e,c)&&(p[c]=e[c]);p.originalType=n,p.mdxType="string"==typeof n?n:r,i[1]=p;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},828:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return m}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],p={sidebar_label:"Bacalhau Apply",sidebar_position:2},c="Bacalhau Apply",l={unversionedId:"cli-flags/apply",id:"cli-flags/apply",title:"Bacalhau Apply",description:"Submit a job to the network in a declarative way by writing a jobspec instead of writing a command. JSON and YAML formats are accepted.",source:"@site/docs/cli-flags/apply.md",sourceDirName:"cli-flags",slug:"/cli-flags/apply",permalink:"/cli-flags/apply",editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/cli-flags/apply.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Bacalhau Apply",sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"CLI Flags",permalink:"/cli-flags/all-flags"}},s=[{value:"Usage",id:"usage",children:[],level:2},{value:"Examples",id:"examples",children:[],level:2}],u={toc:s};function m(n){var e=n.components,t=(0,r.Z)(n,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"bacalhau-apply"},"Bacalhau Apply"),(0,o.kt)("p",null,"Submit a job to the network in a declarative way by writing a jobspec instead of writing a command. JSON and YAML formats are accepted."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"  bacalhau apply -f FILENAME\n")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"An Example jobspec in YAML format"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1alpha1\nengine: Docker\nverifier: Ipfs\njob_spec_docker:\n  image: gromacs/gromacs\n  entrypoint:\n    - /bin/bash\n    - -c\n    - echo 15 | gmx pdb2gmx -f input/1AKI.pdb -o output/1AKI_processed.gro -water spc\n  env: []\njob_spec_language:\n  language: ''\n  language_version: ''\n  deterministic: false\n  context:\n    engine: ''\n    name: ''\n    cid: ''\n    path: ''\n  command: ''\n  program_path: ''\n  requirements_path: ''\nresources:\n  cpu: ''\n  gpu: ''\n  memory: ''\n  disk: ''\ninputs:\n  - engine: ipfs\n    name: ''\n    cid: QmeeEB1YMrG6K8z43VdsdoYmQV46gAPQCHotZs9pwusCm9\n    path: /input\n  - engine_name: urldownload\n    name: ''\n    url: https://foo.bar.io/foo_data.txt\n    path: /app/foo_data_1.txt\noutputs:\n  - engine: ipfs\n    name: output\n    cid: ''\n    path: /output\nannotations: null\n")),(0,o.kt)("p",null,"An Example jobspoec in JSON format"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "apiVersion": "v1alpha1",\n  "engine": "Docker",\n  "verifier": "Ipfs",\n  "job_spec_docker": {\n      "image": "gromacs/gromacs",\n      "entrypoint": [\n          "/bin/bash",\n          "-c",\n          "echo 15 | gmx pdb2gmx -f input/1AKI.pdb -o output/1AKI_processed.gro -water spc"\n      ],\n      "env": []\n  },\n  "job_spec_language": {\n      "language": "",\n      "language_version": "",\n      "deterministic": false,\n      "context": {\n          "engine": "",\n          "name": "",\n          "cid": "",\n          "path": ""\n      },\n      "command": "",\n      "program_path": "",\n      "requirements_path": ""\n  },\n  "resources": {\n      "cpu": "",\n      "gpu":"",\n      "memory": "",\n      "disk": ""\n  },\n  "inputs": [\n      {\n          "engine": "ipfs",\n          "name": "",\n          "cid": "QmeeEB1YMrG6K8z43VdsdoYmQV46gAPQCHotZs9pwusCm9",\n          "path": "/input"\n      }\n  ],\n  "outputs": [\n      {\n          "engine": "ipfs",\n          "name": "output",\n          "cid": "",\n          "path": "/output"\n      }\n  ],\n  \n  "annotations": null\n}\n')))}m.isMDXComponent=!0}}]);