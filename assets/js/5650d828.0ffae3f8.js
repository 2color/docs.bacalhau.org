"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[2061],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),h=s,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2073:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),s=(n(7294),n(3905));const r={sidebar_label:"Ethereum Blockchain Analysis",sidebar_position:3},i="Ethereum Blockchain Analysis with Ethereum-ETL and Bacalhau",o={unversionedId:"examples/data-engineering/blockchain-etl/index",id:"examples/data-engineering/blockchain-etl/index",title:"Ethereum Blockchain Analysis with Ethereum-ETL and Bacalhau",description:"Open In Colab",source:"@site/docs/examples/data-engineering/blockchain-etl/index.md",sourceDirName:"examples/data-engineering/blockchain-etl",slug:"/examples/data-engineering/blockchain-etl/",permalink:"/examples/data-engineering/blockchain-etl/",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/examples/data-engineering/blockchain-etl/index.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Ethereum Blockchain Analysis",sidebar_position:3},sidebar:"documentationSidebar",previous:{title:"Simple Parallel Workloads",permalink:"/examples/data-engineering/simple-parallel-workloads/"},next:{title:"Oceanography - Data Conversion",permalink:"/examples/data-engineering/oceanography-conversion/"}},l={},p=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"1. Analysing Ethereum Data Locally",id:"1-analysing-ethereum-data-locally",level:2},{value:"2. Analysing Ethereum Data With Bacalhau",id:"2-analysing-ethereum-data-with-bacalhau",level:2},{value:"Analysing Ethereum Data On Bacalhau",id:"analysing-ethereum-data-on-bacalhau",level:3},{value:"Massive Scale Ethereum Analysis",id:"massive-scale-ethereum-analysis",level:3},{value:"Appendix 1: List Ethereum Data CIDs",id:"appendix-1-list-ethereum-data-cids",level:2},{value:"Appendix 2: Setting up an Ethereum Node",id:"appendix-2-setting-up-an-ethereum-node",level:2},{value:"Geth setup and sync",id:"geth-setup-and-sync",level:3},{value:"Extracting the Data",id:"extracting-the-data",level:3},{value:"Upload the data",id:"upload-the-data",level:3}],u={toc:p};function c(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"ethereum-blockchain-analysis-with-ethereum-etl-and-bacalhau"},"Ethereum Blockchain Analysis with Ethereum-ETL and Bacalhau"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/bacalhau-project/examples/blob/main/data-engineering/blockchain-etl/index.ipynb"},(0,s.kt)("img",{parentName:"a",src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})),"\n",(0,s.kt)("a",{parentName:"p",href:"https://mybinder.org/v2/gh/bacalhau-project/examples/HEAD?labpath=data-engineering/blockchain-etl/index.ipynb"},(0,s.kt)("img",{parentName:"a",src:"https://mybinder.org/badge.svg",alt:"Open In Binder"}))),(0,s.kt)("h1",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,"Mature blockchains are difficult to analyze because of their size. Ethereum-ETL is a tool that makes it easy to extract information from an Ethereum node, but it's not easy to get working in a batch manner. It takes approximately 1 week for an ethereum node to download the entire chain and importing and exporting data from the ethereum node is slow."),(0,s.kt)("p",null,"For this example we ran an ethereum node for a week and allowed it to synchronise. We then ran ethereum-etl to extract the information and pinned it on Filecoin. This means that we can both now access the data without having to run another ethereum node."),(0,s.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Python 3 "),(0,s.kt)("li",{parentName:"ul"},"The Bacalhau client - ",(0,s.kt)("a",{parentName:"li",href:"https://docs.bacalhau.org/getting-started/installation"},"Installation instructions"))),(0,s.kt)("h2",{id:"1-analysing-ethereum-data-locally"},"1. Analysing Ethereum Data Locally"),(0,s.kt)("p",null,"First let's download one of the IPFS files and inspect it locally. You can see the full list of IPFS CIDs in the appendix."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"wget -q -O file.tar.gz https://w3s.link/ipfs/bafybeihvmcrs5voz2pzpdkb3b7kt4bbb6kpi5ohspgrrs7bqkalpwmfdpq\ntar -xvf file.tar.gz\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"x output_1100000/\nx output_1100000/token_transfers/\nx output_1100000/token_transfers/start_block=01100000/\nx output_1100000/token_transfers/start_block=01100000/end_block=01199999/\nx output_1100000/token_transfers/start_block=01100000/end_block=01199999/token_transfers_01100000_01199999.csv\nx output_1100000/contracts/\nx output_1100000/contracts/start_block=01100000/\nx output_1100000/contracts/start_block=01100000/end_block=01199999/\nx output_1100000/contracts/start_block=01100000/end_block=01199999/contracts_01100000_01199999.csv\nx output_1100000/transactions/\nx output_1100000/transactions/start_block=01100000/\nx output_1100000/transactions/start_block=01100000/end_block=01199999/\nx output_1100000/transactions/start_block=01100000/end_block=01199999/transactions_01100000_01199999.csv\nx output_1100000/receipts/\nx output_1100000/receipts/start_block=01100000/\nx output_1100000/receipts/start_block=01100000/end_block=01199999/\nx output_1100000/receipts/start_block=01100000/end_block=01199999/receipts_01100000_01199999.csv\nx output_1100000/tokens/\nx output_1100000/tokens/start_block=01100000/\nx output_1100000/tokens/start_block=01100000/end_block=01199999/\nx output_1100000/tokens/start_block=01100000/end_block=01199999/tokens_01100000_01199999.csv\nx output_1100000/blocks/\nx output_1100000/blocks/start_block=01100000/\nx output_1100000/blocks/start_block=01100000/end_block=01199999/\nx output_1100000/blocks/start_block=01100000/end_block=01199999/blocks_01100000_01199999.csv\nx output_1100000/.tmp/\nx output_1100000/logs/\nx output_1100000/logs/start_block=01100000/\nx output_1100000/logs/start_block=01100000/end_block=01199999/\nx output_1100000/logs/start_block=01100000/end_block=01199999/logs_01100000_01199999.csv\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pandas\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Requirement already satisfied: ethereum-etl in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (2.0.6)\nRequirement already satisfied: pandas in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (1.4.3)\nRequirement already satisfied: web3<6,>=5.29 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from ethereum-etl) (5.31.0)\nRequirement already satisfied: eth-utils==1.10 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from ethereum-etl) (1.10.0)\nRequirement already satisfied: eth-abi==2.1.1 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from ethereum-etl) (2.1.1)\nRequirement already satisfied: python-dateutil<3,>=2.8.0 in /Users/phil/.local/lib/python3.9/site-packages (from ethereum-etl) (2.8.2)\nRequirement already satisfied: click==8.0.4 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from ethereum-etl) (8.0.4)\nRequirement already satisfied: ethereum-dasm==0.1.4 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from ethereum-etl) (0.1.4)\nRequirement already satisfied: base58 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from ethereum-etl) (2.1.1)\nRequirement already satisfied: requests in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from ethereum-etl) (2.26.0)\nRequirement already satisfied: eth-typing<3.0.0,>=2.0.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from eth-abi==2.1.1->ethereum-etl) (2.3.0)\nRequirement already satisfied: parsimonious<0.9.0,>=0.8.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from eth-abi==2.1.1->ethereum-etl) (0.8.1)\nRequirement already satisfied: eth-hash<0.4.0,>=0.3.1 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from eth-utils==1.10->ethereum-etl) (0.3.3)\nRequirement already satisfied: cytoolz<1.0.0,>=0.10.1 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from eth-utils==1.10->ethereum-etl) (0.12.0)\nRequirement already satisfied: tabulate in /Users/phil/.local/lib/python3.9/site-packages (from ethereum-dasm==0.1.4->ethereum-etl) (0.8.9)\nRequirement already satisfied: colorama in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from ethereum-dasm==0.1.4->ethereum-etl) (0.4.5)\nRequirement already satisfied: evmdasm in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from ethereum-dasm==0.1.4->ethereum-etl) (0.1.10)\nRequirement already satisfied: numpy>=1.20.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from pandas) (1.23.0)\nRequirement already satisfied: pytz>=2020.1 in /Users/phil/.local/lib/python3.9/site-packages (from pandas) (2021.1)\nRequirement already satisfied: six>=1.5 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from python-dateutil<3,>=2.8.0->ethereum-etl) (1.16.0)\nRequirement already satisfied: ipfshttpclient==0.8.0a2 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from web3<6,>=5.29->ethereum-etl) (0.8.0a2)\nRequirement already satisfied: lru-dict<2.0.0,>=1.1.6 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from web3<6,>=5.29->ethereum-etl) (1.1.8)\nRequirement already satisfied: eth-account<0.6.0,>=0.5.9 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from web3<6,>=5.29->ethereum-etl) (0.5.9)\nRequirement already satisfied: hexbytes<1.0.0,>=0.1.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from web3<6,>=5.29->ethereum-etl) (0.3.0)\nRequirement already satisfied: aiohttp<4,>=3.7.4.post0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from web3<6,>=5.29->ethereum-etl) (3.8.1)\nRequirement already satisfied: eth-rlp<0.3 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from web3<6,>=5.29->ethereum-etl) (0.2.1)\nRequirement already satisfied: jsonschema<5,>=3.2.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from web3<6,>=5.29->ethereum-etl) (4.16.0)\nRequirement already satisfied: websockets<10,>=9.1 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from web3<6,>=5.29->ethereum-etl) (9.1)\nRequirement already satisfied: protobuf<4,>=3.10.0 in /Users/phil/.local/lib/python3.9/site-packages (from web3<6,>=5.29->ethereum-etl) (3.15.7)\nRequirement already satisfied: multiaddr>=0.0.7 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from ipfshttpclient==0.8.0a2->web3<6,>=5.29->ethereum-etl) (0.0.9)\nRequirement already satisfied: charset-normalizer~=2.0.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from requests->ethereum-etl) (2.0.7)\nRequirement already satisfied: certifi>=2017.4.17 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from requests->ethereum-etl) (2021.10.8)\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from requests->ethereum-etl) (1.26.7)\nRequirement already satisfied: idna<4,>=2.5 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from requests->ethereum-etl) (3.3)\nRequirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from aiohttp<4,>=3.7.4.post0->web3<6,>=5.29->ethereum-etl) (4.0.2)\nRequirement already satisfied: multidict<7.0,>=4.5 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from aiohttp<4,>=3.7.4.post0->web3<6,>=5.29->ethereum-etl) (6.0.2)\nRequirement already satisfied: yarl<2.0,>=1.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from aiohttp<4,>=3.7.4.post0->web3<6,>=5.29->ethereum-etl) (1.8.1)\nRequirement already satisfied: aiosignal>=1.1.2 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from aiohttp<4,>=3.7.4.post0->web3<6,>=5.29->ethereum-etl) (1.2.0)\nRequirement already satisfied: attrs>=17.3.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from aiohttp<4,>=3.7.4.post0->web3<6,>=5.29->ethereum-etl) (22.1.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from aiohttp<4,>=3.7.4.post0->web3<6,>=5.29->ethereum-etl) (1.3.1)\nRequirement already satisfied: toolz>=0.8.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from cytoolz<1.0.0,>=0.10.1->eth-utils==1.10->ethereum-etl) (0.12.0)\nRequirement already satisfied: eth-keys<0.4.0,>=0.3.4 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from eth-account<0.6.0,>=0.5.9->web3<6,>=5.29->ethereum-etl) (0.3.4)\nRequirement already satisfied: bitarray<3,>=1.2.1 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from eth-account<0.6.0,>=0.5.9->web3<6,>=5.29->ethereum-etl) (2.6.0)\nRequirement already satisfied: eth-keyfile<0.6.0,>=0.5.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from eth-account<0.6.0,>=0.5.9->web3<6,>=5.29->ethereum-etl) (0.5.1)\nRequirement already satisfied: rlp<3,>=1.0.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from eth-account<0.6.0,>=0.5.9->web3<6,>=5.29->ethereum-etl) (2.0.1)\nRequirement already satisfied: pycryptodome<4,>=3.6.6 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from eth-hash<0.4.0,>=0.3.1->eth-utils==1.10->ethereum-etl) (3.15.0)\nRequirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from jsonschema<5,>=3.2.0->web3<6,>=5.29->ethereum-etl) (0.18.1)\nRequirement already satisfied: varint in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from multiaddr>=0.0.7->ipfshttpclient==0.8.0a2->web3<6,>=5.29->ethereum-etl) (1.0.2)\nRequirement already satisfied: netaddr in /Users/phil/.pyenv/versions/3.9.7/lib/python3.9/site-packages (from multiaddr>=0.0.7->ipfshttpclient==0.8.0a2->web3<6,>=5.29->ethereum-etl) (0.8.0)\n\n[notice] A new release of pip available: 22.1.2 -> 22.3.1\n[notice] To update, run: pip install --upgrade pip\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Use pandas to read in transation data and clean up the columns\nimport pandas as pd\ndf = pd.read_csv('output_1100000/transactions/start_block=01100000/end_block=01199999/transactions_01100000_01199999.csv')\ndf['value'] = df['value'].astype('float')\ndf['from_address'] = df['from_address'].astype('string')\ndf['to_address'] = df['to_address'].astype('string')\ndf['hash'] = df['hash'].astype('string')\ndf['block_hash'] = df['block_hash'].astype('string')\ndf['block_datetime'] = pd.to_datetime(df['block_timestamp'], unit='s')\ndf.info()\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 520716 entries, 0 to 520715\nData columns (total 16 columns):\n #   Column                    Non-Null Count   Dtype         \n---  ------                    --------------   -----         \n 0   hash                      520716 non-null  string        \n 1   nonce                     520716 non-null  int64         \n 2   block_hash                520716 non-null  string        \n 3   block_number              520716 non-null  int64         \n 4   transaction_index         520716 non-null  int64         \n 5   from_address              520716 non-null  string        \n 6   to_address                518546 non-null  string        \n 7   value                     520716 non-null  float64       \n 8   gas                       520716 non-null  int64         \n 9   gas_price                 520716 non-null  int64         \n 10  input                     520716 non-null  object        \n 11  block_timestamp           520716 non-null  int64         \n 12  max_fee_per_gas           0 non-null       float64       \n 13  max_priority_fee_per_gas  0 non-null       float64       \n 14  transaction_type          520716 non-null  int64         \n 15  block_datetime            520716 non-null  datetime64[ns]\ndtypes: datetime64[ns](1), float64(3), int64(7), object(1), string(4)\nmemory usage: 63.6+ MB\n")),(0,s.kt)("p",null,"The following code inspects the daily trading volume of Ethereum for a single chunk (100,000 blocks) of data."),(0,s.kt)("p",null,"This is all good, but we can do better. We can use the Bacalhau client to download the data from IPFS and then run the analysis on the data in the cloud. This means that we can analyse the entire Ethereum blockchain without having to download it locally."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Total volume per day\ndf[['block_datetime', 'value']].groupby(pd.Grouper(key='block_datetime', freq='1D')).sum().plot()\n\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"<AxesSubplot:xlabel='block_datetime'>\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"png",src:n(6901).Z,width:"378",height:"297"})),(0,s.kt)("h2",{id:"2-analysing-ethereum-data-with-bacalhau"},"2. Analysing Ethereum Data With Bacalhau"),(0,s.kt)("p",null,"To run jobs on the Bacalhau network you need to package your code. In this example I will package the code as a Docker image."),(0,s.kt)("p",null,"But before we do that, we need to develop the code that will perform the analysis. The code below is a simple script to parse the incoming data and produce a CSV file with the daily trading volume of Ethereum."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'%%writefile main.py\nimport glob, os, sys, shutil, tempfile\nimport pandas as pd\n\ndef main(input_dir, output_dir):\n    search_path = os.path.join(input_dir, "output*", "transactions", "start_block*", "end_block*", "transactions_*.csv")\n    csv_files = glob.glob(search_path)\n    if len(csv_files) == 0:\n        print("No CSV files found in %s" % search_path)\n        sys.exit(1)\n    for transactions_file in csv_files:\n        print("Loading %s" % transactions_file)\n        df = pd.read_csv(transactions_file)\n        df[\'value\'] = df[\'value\'].astype(\'float\')\n        df[\'block_datetime\'] = pd.to_datetime(df[\'block_timestamp\'], unit=\'s\')\n        \n        print("Processing %d blocks" % (df.shape[0]))\n        results = df[[\'block_datetime\', \'value\']].groupby(pd.Grouper(key=\'block_datetime\', freq=\'1D\')).sum()\n        print("Finished processing %d days worth of records" % (results.shape[0]))\n\n        save_path = os.path.join(output_dir, os.path.basename(transactions_file))\n        os.makedirs(os.path.dirname(save_path), exist_ok=True)\n        print("Saving to %s" % (save_path))\n        results.to_csv(save_path)\n\ndef extractData(input_dir, output_dir):\n    search_path = os.path.join(input_dir, "*.tar.gz")\n    gz_files = glob.glob(search_path)\n    if len(gz_files) == 0:\n        print("No tar.z files found in %s" % search_path)\n        sys.exit(1)\n    for f in gz_files:\n        shutil.unpack_archive(filename=f, extract_dir=output_dir)\n\nif __name__ == "__main__":\n    if len(sys.argv) != 3:\n        print(\'Must pass arguments. Format: [command] input_dir output_dir\')\n        sys.exit()\n    with tempfile.TemporaryDirectory() as tmp_dir:\n        extractData(sys.argv[1], tmp_dir)\n        main(tmp_dir, sys.argv[2])\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Overwriting main.py\n")),(0,s.kt)("p",null,"Next, let's make sure the file works as expected..."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"python main.py . outputs/\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Loading /var/folders/kr/pl4p96k11b55hp5_p9l_t8kr0000gn/T/tmpv1gvkg2v/output_1100000/transactions/start_block=01100000/end_block=01199999/transactions_01100000_01199999.csv\nProcessing 520716 blocks\nFinished processing 20 days worth of records\nSaving to outputs/transactions_01100000_01199999.csv\n")),(0,s.kt)("p",null,"And finally, package the code inside a Docker image to make the process reproducible. Here I'm passing the Bacalhau default ",(0,s.kt)("inlineCode",{parentName:"p"},"/inputs")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"/outputs")," directories. The ",(0,s.kt)("inlineCode",{parentName:"p"},"/inputs")," directory is where the data will be read from and the ",(0,s.kt)("inlineCode",{parentName:"p"},"/outputs")," directory is where the results will be saved to."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'%%writefile Dockerfile\nFROM python:3.11-slim-bullseye\nWORKDIR /src\nRUN pip install pandas==1.5.1\nADD main.py .\nCMD ["python", "main.py", "/inputs", "/outputs"]\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Overwriting Dockerfile\n")),(0,s.kt)("p",null,"We've already pushed the container, but for posterity, the following command pushes this container to GHCR."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"docker buildx build --platform linux/amd64 --push -t ghcr.io/bacalhau-project/examples/blockchain-etl:0.0.1 .\n")),(0,s.kt)("h3",{id:"analysing-ethereum-data-on-bacalhau"},"Analysing Ethereum Data On Bacalhau"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://www.bacalhau.org/"},"Bacalhau")," is a distributed computing platform that allows you to run jobs on a network of computers. It is designed to be easy to use and to run on a variety of hardware. In this example, we will use it to run our analysis on the Ethereum blockchain."),(0,s.kt)("p",null,"To submit a job, you can use the Bacalhau CLI. The following command will run the container above on the IPFS data -- the long hash -- shown at the start of this notebook. Let's confirm that the results are as expected."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau docker run \\\n    --id-only \\\n    --input-volumes bafybeihvmcrs5voz2pzpdkb3b7kt4bbb6kpi5ohspgrrs7bqkalpwmfdpq:/inputs/data.tar.gz \\\n    ghcr.io/bacalhau-project/examples/blockchain-etl:0.0.6\n")),(0,s.kt)("p",null,"Running the commands will output a UUID that represents the job that was created. You can check the status of the job with the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau list --id-filter ${JOB_ID}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"\x1b[92;100m CREATED  \x1b[0m\x1b[92;100m ID       \x1b[0m\x1b[92;100m JOB                     \x1b[0m\x1b[92;100m STATE     \x1b[0m\x1b[92;100m VERIFIED \x1b[0m\x1b[92;100m PUBLISHED               \x1b[0m\n\x1b[97;40m 11:48:46 \x1b[0m\x1b[97;40m 15673ac4 \x1b[0m\x1b[97;40m Docker ghcr.io/bacal... \x1b[0m\x1b[97;40m Completed \x1b[0m\x1b[97;40m          \x1b[0m\x1b[97;40m /ipfs/QmP5z2CPPybiVf... \x1b[0m\n")),(0,s.kt)("p",null,"Wait until it says ",(0,s.kt)("inlineCode",{parentName:"p"},"Completed")," and then get the results."),(0,s.kt)("p",null,"To find out more information about your job, run the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau describe ${JOB_ID}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'APIVersion: V1beta1\nClientID: 77cf46c04f88ffb1c3e0e4b6e443724e8d2d87074d088ef1a6294a448fa85d2e\nCreatedAt: "2022-11-18T11:48:46.303661585Z"\nDeal:\n  Concurrency: 1\nExecutionPlan:\n  ShardsTotal: 1\nID: 15673ac4-848f-4c7f-81a0-7e018fe9ba78\nJobState:\n  Nodes:\n    QmVAb7r2pKWCuyLpYWoZr9syhhFnTWeFaByHdb8PkkhLQG:\n      Shards:\n        "0":\n          NodeId: QmVAb7r2pKWCuyLpYWoZr9syhhFnTWeFaByHdb8PkkhLQG\n          PublishedResults:\n            CID: QmP5z2CPPybiVfGxyfEBjVqGF4S8VRFx59ucKShLDsBLWk\n            Name: job-15673ac4-848f-4c7f-81a0-7e018fe9ba78-shard-0-host-QmVAb7r2pKWCuyLpYWoZr9syhhFnTWeFaByHdb8PkkhLQG\n            StorageSource: IPFS\n          RunOutput:\n            exitCode: 0\n            runnerError: ""\n            stderr: ""\n            stderrtruncated: false\n            stdout: |\n              Loading /tmp/tmpyw253u9x/output_1100000/transactions/start_block=01100000/end_block=01199999/transactions_01100000_01199999.csv\n              Processing 520716 blocks\n              Finished processing 20 days worth of records\n              Saving to /outputs/transactions_01100000_01199999.csv\n            stdouttruncated: false\n          State: Completed\n          Status: \'Got results proposal of length: 0\'\n          VerificationResult:\n            Complete: true\n            Result: true\n    QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF:\n      Shards:\n        "0":\n          NodeId: QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF\n          PublishedResults: {}\n          State: Cancelled\n          VerificationResult: {}\n    QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL:\n      Shards:\n        "0":\n          NodeId: QmdZQ7ZbhnvWY1J12XYKGHApJ6aufKyLNSvf8jZBrBaAVL\n          PublishedResults: {}\n          State: Cancelled\n          VerificationResult: {}\nRequesterNodeID: QmXaXu9N5GNetatsvwnTfQqNtSeKAD6uCmarbh3LMRYAcF\nRequesterPublicKey: CAASpgIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCehDIWl72XKJi1tsrYM9JjAWt3n6hNzrCA+IVRXixK1sJVTLMpsxEP8UKJI+koAWkAUuY8yi6DMzot0owK4VpM3PYp34HdKi2hTjzM8pjCVb70XVXt6k9bzj4KmbiQTuEkQfvwIRmgxb2jrkRdTpZmhMb1Q7StR/nrGa/bx75Vpupx1EYH6+LixYnnV5WbCUK/kjpBW8SF5v+f9ZO61KHd9DMpdhJnzocTGq17tAjHh3birke0xlP98JjxlMkzzvIAuFsnH0zBIgjmHDA1Yi5DcOPWgE0jUfGlSDC1t2xITVoofHQcXDjkHZE6OhxswNYPd7cnTf9OppLddFdQnga5AgMBAAE=\nSpec:\n  Docker:\n    Image: ghcr.io/bacalhau-project/examples/blockchain-etl:0.0.6\n  Engine: Docker\n  Language:\n    JobContext: {}\n  Publisher: Estuary\n  Resources:\n    GPU: ""\n  Sharding:\n    BatchSize: 1\n    GlobPatternBasePath: /inputs\n  Timeout: 1800\n  Verifier: Noop\n  Wasm: {}\n  inputs:\n  - CID: bafybeihvmcrs5voz2pzpdkb3b7kt4bbb6kpi5ohspgrrs7bqkalpwmfdpq\n    StorageSource: IPFS\n    path: /inputs/data.tar.gz\n  outputs:\n  - Name: outputs\n    StorageSource: IPFS\n    path: /outputs\n')),(0,s.kt)("p",null,"And let's inspect the results."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p ./results # Temporary directory to store the results\nbacalhau get --output-dir ./results ${JOB_ID} # Download the results\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Fetching results of job '15673ac4-848f-4c7f-81a0-7e018fe9ba78'...\nResults for job '15673ac4-848f-4c7f-81a0-7e018fe9ba78' have been written to...\n./results\n")),(0,s.kt)("p",null,"The docker run command above used the ",(0,s.kt)("inlineCode",{parentName:"p"},"outputs")," volume as a results folder so when we download them they will be stored in a  folder within ",(0,s.kt)("inlineCode",{parentName:"p"},"volumes/outputs"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"ls -lah results/combined_results/outputs\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"total 4.0K\ndrwxr-xr-x 3 phil staff  96 Nov 18 11:49 .\ndrwxr-xr-x 5 phil staff 160 Nov 18 11:49 ..\n-rw-r--r-- 3 phil staff 692 Nov 18 11:49 transactions_01100000_01199999.csv\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import pandas as pd\n\ndf = pd.read_csv('results/combined_results/outputs/transactions_01100000_01199999.csv', index_col='block_datetime')\ndf.plot()\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"<AxesSubplot:xlabel='block_datetime'>\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"png",src:n(9663).Z,width:"372",height:"274"})),(0,s.kt)("h3",{id:"massive-scale-ethereum-analysis"},"Massive Scale Ethereum Analysis"),(0,s.kt)("p",null,"Ok so that works. Let's scale this up! We can run the same analysis on the entire Ethereum blockchain (up to the point where I have uploaded the Ethereum data). To do this, we need to run the analysis on each of the chunks of data that we have stored on IPFS. We can do this by running the same job on each of the chunks."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'printf "" > job_ids.txt\nfor h in $(cat hashes.txt); do \\\n    bacalhau docker run \\\n    --id-only \\\n    --wait=false \\\n    --input-volumes=$h:/inputs/data.tar.gz \\\n    ghcr.io/bacalhau-project/examples/blockchain-etl:0.0.6 >> job_ids.txt \ndone\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cat job_ids.txt\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"da73f5b0-89c5-4f6f-a6e9-ff4ae186e8a4\n250285e8-0dec-4d89-b627-ea950420c504\n4d7f30ef-e409-43ce-9bba-1a4a6a4d337a\ne36516f3-5252-4a63-871b-b624366c7e22\nf6e12bac-0bf4-48c3-828d-2c2f62d0f97f\nc004d954-32eb-4a90-a5e3-c266678a5607\n46459ab2-5430-40c8-bf3c-4b2a799a500c\nccd6fae5-70fb-46ef-a256-d7a484335d79\nd63c4e08-fa76-44b8-b94e-681a5b342fe6\n19462995-324a-4872-9800-6c0a95fdf0e7\n8fa72856-c1da-455b-b56d-d60c6b10b655\n3aa1f9bd-ce60-43d5-9b49-ec2f5beb4c6c\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"rm -rf ./combined_results && mkdir -p ./combined_results\nfor id in $(cat job_ids.txt); do \\\n    rm -rf results && mkdir results\n    bacalhau get --output-dir ./results $id\n    cp results/combined_results/outputs/* ./combined_results\ndone\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Fetching results of job 'da73f5b0-89c5-4f6f-a6e9-ff4ae186e8a4'...\nResults for job 'da73f5b0-89c5-4f6f-a6e9-ff4ae186e8a4' have been written to...\n./results\nFetching results of job '250285e8-0dec-4d89-b627-ea950420c504'...\nResults for job '250285e8-0dec-4d89-b627-ea950420c504' have been written to...\n./results\nFetching results of job '4d7f30ef-e409-43ce-9bba-1a4a6a4d337a'...\nResults for job '4d7f30ef-e409-43ce-9bba-1a4a6a4d337a' have been written to...\n./results\nFetching results of job 'e36516f3-5252-4a63-871b-b624366c7e22'...\nResults for job 'e36516f3-5252-4a63-871b-b624366c7e22' have been written to...\n./results\nFetching results of job 'f6e12bac-0bf4-48c3-828d-2c2f62d0f97f'...\nResults for job 'f6e12bac-0bf4-48c3-828d-2c2f62d0f97f' have been written to...\n./results\nFetching results of job 'c004d954-32eb-4a90-a5e3-c266678a5607'...\nResults for job 'c004d954-32eb-4a90-a5e3-c266678a5607' have been written to...\n./results\nFetching results of job '46459ab2-5430-40c8-bf3c-4b2a799a500c'...\nResults for job '46459ab2-5430-40c8-bf3c-4b2a799a500c' have been written to...\n./results\nFetching results of job 'ccd6fae5-70fb-46ef-a256-d7a484335d79'...\nResults for job 'ccd6fae5-70fb-46ef-a256-d7a484335d79' have been written to...\n./results\nFetching results of job 'd63c4e08-fa76-44b8-b94e-681a5b342fe6'...\nResults for job 'd63c4e08-fa76-44b8-b94e-681a5b342fe6' have been written to...\n./results\nFetching results of job '19462995-324a-4872-9800-6c0a95fdf0e7'...\nResults for job '19462995-324a-4872-9800-6c0a95fdf0e7' have been written to...\n./results\nFetching results of job '8fa72856-c1da-455b-b56d-d60c6b10b655'...\nResults for job '8fa72856-c1da-455b-b56d-d60c6b10b655' have been written to...\n./results\nFetching results of job '3aa1f9bd-ce60-43d5-9b49-ec2f5beb4c6c'...\nResults for job '3aa1f9bd-ce60-43d5-9b49-ec2f5beb4c6c' have been written to...\n./results\n\n\n2022/11/18 12:13:42 CleanupManager.fnsMutex violation CRITICAL section took 21.65ms 21650000 (threshold 10ms)\n2022/11/18 12:13:46 CleanupManager.fnsMutex violation CRITICAL section took 10.564ms 10564000 (threshold 10ms)\n2022/11/18 12:14:03 CleanupManager.fnsMutex violation CRITICAL section took 20.862ms 20862000 (threshold 10ms)\n2022/11/18 12:14:07 CleanupManager.fnsMutex violation CRITICAL section took 18.909ms 18909000 (threshold 10ms)\n2022/11/18 12:14:19 CleanupManager.fnsMutex violation CRITICAL section took 19.754ms 19754000 (threshold 10ms)\n2022/11/18 12:15:26 CleanupManager.fnsMutex violation CRITICAL section took 21.134ms 21134000 (threshold 10ms)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'import os, glob\nimport pandas as pd\n\n# Get CSV files list from a folder\npath = os.path.join("combined_results", "*.csv")\ncsv_files = glob.glob(path)\n\n# Read each CSV file into a list of DataFrames\ndf_list = (pd.read_csv(file, index_col=\'block_datetime\') for file in csv_files)\n\n# Concatenate all DataFrames\ndf_unsorted = pd.concat(df_list, ignore_index=False)\n\n# Some files will cross days, so group by day and sum the values\ndf = df_unsorted.groupby(level=0).sum()\n\n# Plot\ndf.plot()\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"<AxesSubplot:xlabel='block_datetime'>\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"png",src:n(6119).Z,width:"372",height:"274"})),(0,s.kt)("p",null,"That's it! There is several years of Ethereum transaction volume data."),(0,s.kt)("h2",{id:"appendix-1-list-ethereum-data-cids"},"Appendix 1: List Ethereum Data CIDs"),(0,s.kt)("p",null,"The following list is a list of IPFS CID's for the Ethereum data that we used in this tutorial. You can use these CID's to download the rest of the chain if you so desire. The CIDs are ordered by block number and they increase 100,000 blocks at a time. Here's a list of ordered CIDs:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cat hashes.txt\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"bafybeihzxaqjpvlb7rzu4ttipma7sths42eolrv7fq6bsdrbb7hckb3oo4\nbafybeihsz6omseh27ayglbcebshk6crgbnj2jalt524ihgfqkshcwgmdhq\nbafybeicxuum3qerxe5v22fcmyryfmumbxskqdkst56zpaofjsgjff5qrom\nbafybeiggm7nhwf5roouchk7lir6vcxoe2luojdlcyukqlqj5q7mibd2i5e\nbafybeiflcauohsv4uz3m7e2z5ybcoxn7gvj2rko5pl25xulw22g4qnygpe\nbafybeidefyiltnd3gpuhy3sicygnsafnocnzxlcoexxsxeobearat2wzym\nbafybeigcyteztp5pdjr3imx55rl2tdg3maigt4w6fpse6dctf2fodusxdm\nbafybeiffn7wlhjwajkhhk7cvuxbwuwaodd4h3qfzhhyp33jh3kp6u3usui\nbafybeievtkkhkrj2eydcjklp532hvleww4i4gvfblvwvinwnu3646sprqu\nbafybeieia52c7t6t35zt2lkcshiwtehsyxojs3hhpvcu367y5em6d7tpna\nbafybeicsfa5x4ns46kmvqgauwwskjl6bl3nrkxgo5i33ijj4mjlfh2vvfy\nbafybeihvmcrs5voz2pzpdkb3b7kt4bbb6kpi5ohspgrrs7bqkalpwmfdpq\n")),(0,s.kt)("h2",{id:"appendix-2-setting-up-an-ethereum-node"},"Appendix 2: Setting up an Ethereum Node"),(0,s.kt)("p",null,"In the course of writing this example I had to setup an Ethereum node. It was a slow and painful process so I thought I would share the steps I took to make it easier for others."),(0,s.kt)("h3",{id:"geth-setup-and-sync"},"Geth setup and sync"),(0,s.kt)("p",null,"Geth supports Ubuntu by default, so use that when creating a VM. Use Ubuntu 22.04 LTS."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud compute instances create phil-ethereum-node \\\n    --project=bacalhau-development --zone=europe-west2-c \\\n    --machine-type=c2-standard-4 --tags=geth \\\n    --create-disk=auto-delete=yes,boot=yes,device-name=phil-ethereum-node,image=projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20221101a,mode=rw,size=50,type=projects/bacalhau-development/zones/europe-west2-c/diskTypes/pd-balanced \\\n    --create-disk=auto-delete=yes,device-name=phil-ethereum-disk,mode=rw,name=phil-ethereum-disk,size=3000,type=projects/bacalhau-development/zones/europe-west2-c/diskTypes/pd-standard\n")),(0,s.kt)("p",null,"Mount the disk:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"sudo mkfs.ext4 -m 0 -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/sdb\nsudo mkdir -p /mnt/disks/ethereum\nsudo mount -o discard,defaults /dev/sdb /mnt/disks/ethereum\nsudo chmod a+w /mnt/disks/ethereum\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"sudo add-apt-repository -y ppa:ethereum/ethereum\nsudo apt-get update\nsudo apt-get install -y ethereum\nsudo mkdir /prysm && cd /prysm\nsudo curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh && sudo chmod +x prysm.sh\n")),(0,s.kt)("p",null,"Run as a new user:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"sudo useradd -d /home/ethuser -m --uid 10000 ethuser\nsudo chown -R ethuser /prysm\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'sudo tee "/etc/systemd/system/geth.service" > /dev/null <<\'EOF\'\n[Unit]\nDescription=Geth\n\n[Service]\nType=simple\nUser=ethuser\nRestart=always\nRestartSec=12\nExecStart=/bin/geth --syncmode "full" --datadir /mnt/disks/ethereum\n\n[Install]\nWantedBy=default.target\nEOF\n\nsudo tee "/etc/systemd/system/prysm.service" > /dev/null <<\'EOF\'\n[Unit]\nDescription=Prysm\n\n[Service]\nType=simple\nUser=ethuser\nRestart=always\nRestartSec=12\nExecStart=/prysm/prysm.sh beacon-chain --execution-endpoint=/mnt/disks/ethereum/geth.ipc --suggested-fee-recipient=0x7f68cb1cdE000AF82291A0D0c21E0f88FD7dB440 --checkpoint-sync-url=https://beaconstate.info\n--genesis-beacon-api-url=https://beaconstate.info --accept-terms-of-use --datadir /mnt/disks/ethereum/prysm\n\n[Install]\nWantedBy=default.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable prysm.service\nsudo systemctl enable geth.service\nsudo systemctl daemon-reload\nsudo service prysm start \nsudo service geth start \n')),(0,s.kt)("p",null,"Check they are running:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"service prysm status\nservice geth status\n")),(0,s.kt)("p",null,"Watch the logs:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"journalctl -u prysm -f\n")),(0,s.kt)("p",null,"Prysm will need to finish synchronising before geth will start syncronising."),(0,s.kt)("p",null,"In Prysm you will see lots of log messages saying: ",(0,s.kt)("inlineCode",{parentName:"p"},"Synced new block"),", and in Geth you will see: ",(0,s.kt)("inlineCode",{parentName:"p"},"Syncing beacon headers    downloaded=11,920,384 left=4,054,753  eta=2m25.903s"),". This tells you how long it will take to sync the beacons. Once that's done, get will start synchronising the blocks."),(0,s.kt)("p",null,"Bring up the ethereum javascript console with:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"sudo geth --datadir /mnt/disks/ethereum/ attach\n")),(0,s.kt)("p",null,"Once the block sync has started, ",(0,s.kt)("inlineCode",{parentName:"p"},"eth.syncing")," will return values. Before it starts, this value will be ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,s.kt)("p",null,"Note that by default, geth will perform a fast sync, without downloading the full blocks. The ",(0,s.kt)("inlineCode",{parentName:"p"},"syncmode=flull")," flag forces geth to do a full sync. If we didn't do this, then we wouldn't be able to backup the data properly."),(0,s.kt)("h3",{id:"extracting-the-data"},"Extracting the Data"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Install pip and ethereum-etl\nsudo apt-get install -y python3-pip\nsudo pip3 install ethereum-etl\ncd\nmkdir ethereum-etl\ncd ethereum-etl\n\n# Export data with one 100000-item batch in a directory, up to 2499999 for now\n# The full chain is about 15m blocks\nfor i in $(seq 0 100000 2499999); do sudo ethereumetl export_all --partition-batch-size 100000 --start $i --end $(expr $i + 100000 - 1)  --provider-uri file:///mnt/disks/ethereum/geth.ipc -o output_$i; done\n")),(0,s.kt)("h3",{id:"upload-the-data"},"Upload the data"),(0,s.kt)("p",null,"Tar and compress the directories to make them easier to upload:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install -y jq # Install jq to parse the cid\ncd\ncd ethereum-etl\nfor i in $(seq 0 100000 2499999); do tar cfz output_$i.tar.gz output_$i; done\n")),(0,s.kt)("p",null,"Export your Web3.storage JWT API key as an environment variable called ",(0,s.kt)("inlineCode",{parentName:"p"},"TOKEN"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'printf "" > hashes.txt\nfor i in $(seq 0 100000 2499999); do curl -X POST https://api.web3.storage/upload -H "Authorization: Bearer ${TOKEN}" -H \'accept: application/json\' -H \'Content-Type: text/plain\' -H "X-NAME: ethereum-etl-block-$i" --data-binary "@output_$i.tar.gz" | jq --raw-output \'.cid\' >> hashes.txt; done\n')))}c.isMDXComponent=!0},9663:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/index_25_1-15620cb4cbe858b4d6c4e27a5715208d.png"},6119:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/index_30_1-67a2af0ab928fc59a9b2f9b41840819b.png"},6901:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/index_7_1-d38be37f716095e1f67841bc16bac653.png"}}]);