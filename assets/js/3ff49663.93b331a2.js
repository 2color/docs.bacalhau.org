"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[8662],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(a),d=o,h=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},3633:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var n=a(3117),o=(a(7294),a(3905));const r={sidebar_label:"Image Processing",sidebar_position:1,jupyter:{jupytext:{notebook_metadata_filter:"sidebar_label,sidebar_position",text_representation:{extension:".md",format_name:"markdown",format_version:"1.3",jupytext_version:"1.14.1"}},kernelspec:{display_name:"Python 3",language:"python",name:"python3"}}},i=void 0,l={unversionedId:"examples/data-engineering/image-processing/README",id:"examples/data-engineering/image-processing/README",title:"README",description:"Introduction",source:"@site/docs/examples/data-engineering/image-processing/README.md",sourceDirName:"examples/data-engineering/image-processing",slug:"/examples/data-engineering/image-processing/",permalink:"/examples/data-engineering/image-processing/",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/examples/data-engineering/image-processing/README.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Image Processing",sidebar_position:1,jupyter:{jupytext:{notebook_metadata_filter:"sidebar_label,sidebar_position",text_representation:{extension:".md",format_name:"markdown",format_version:"1.3",jupytext_version:"1.14.1"}},kernelspec:{display_name:"Python 3",language:"python",name:"python3"}}},sidebar:"documentationSidebar",previous:{title:"Data Engineering",permalink:"/examples/data-engineering/"},next:{title:"Workload Onboarding",permalink:"/examples/workload-onboarding/"}},s={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequistes",id:"prerequistes",level:2},{value:"Submit the workload",id:"submit-the-workload",level:2},{value:"Get results",id:"get-results",level:2},{value:"Where to go next?",id:"where-to-go-next",level:2},{value:"Support",id:"support",level:2}],p={toc:u};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"image-processing"},"Image Processing"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Often, you will need to process a number of images across an entire data set hosted on IPFS. For example, the entire ",(0,o.kt)("a",{parentName:"p",href:"https://ipfs.io/ipfs/QmeZRGhe4PmjctYVSVHuEiA9oSXnqmYa4kQubSHgWbjv72"},"Landsat data dataset is hosted on IPFS "),". This is many thousands of images, it would be very convenient to run a job against the data without having to download it!"),(0,o.kt)("p",null,"This page is a demo of a data intensive image processing workload run on Bacalhau that transforms very high resolution imagery into thumbnail-size pictures.\nIt is an example of a highly parellizable compute task where a resize function is applied over a large number of files.\nFor a live walk through of this demo please watch the first part of the video below, otherwise feel free to run the demo yourself by following the steps below."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=wkOh05J5qgA"},(0,o.kt)("img",{alt:"Bacalhau Intro Video",src:a(8134).Z,width:"852",height:"485"}))),(0,o.kt)("h2",{id:"prerequistes"},"Prerequistes"),(0,o.kt)("p",null,"Make sure you have the latest ",(0,o.kt)("inlineCode",{parentName:"p"},"bacalhau")," client installed by following the ",(0,o.kt)("a",{parentName:"p",href:"../../../getting-started/installation"},"getting started instructions"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"!bacalhau version\n")),(0,o.kt)("h2",{id:"submit-the-workload"},"Submit the workload"),(0,o.kt)("p",null,"In this example we will be working against a small ",(0,o.kt)("a",{parentName:"p",href:"https://ipfs.io/ipfs/QmeZRGhe4PmjctYVSVHuEiA9oSXnqmYa4kQubSHgWbjv72"},"subset of the dataset"),". We will go through a demo similar to what you may need to do at scale: resizing all the images down to 100x100px."),(0,o.kt)("p",null,"To get started with a new concept, ",(0,o.kt)("inlineCode",{parentName:"p"},"bacalhau docker run")," allows you to pass input data volume with a ",(0,o.kt)("inlineCode",{parentName:"p"},"-v CID:path")," argument just like Docker, except the left hand side of the argument is a ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/multiformats/cid"},"content identifier (CID)"),".\nThis results in a ",(0,o.kt)("em",{parentName:"p"},"data volume")," and can mount in an entire directory (instead of a single file)."),(0,o.kt)("p",null,"When you set this flag, it then ensures that CID is mounted into the container at the ",(0,o.kt)("inlineCode",{parentName:"p"},"path")," location as an input volume."),(0,o.kt)("p",null,"Data volumes also work on output - by default ",(0,o.kt)("inlineCode",{parentName:"p"},"bacalhau docker run")," always creates an output data volume mounted at ",(0,o.kt)("inlineCode",{parentName:"p"},"/outputs"),".\nThis is a convenient location to store the results of your job. See below for an example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"!bacalhau docker run \\\n  -v QmeZRGhe4PmjctYVSVHuEiA9oSXnqmYa4kQubSHgWbjv72:/input_images \\\n  dpokidov/imagemagick:7.1.0-47-ubuntu \\\n  -- magick mogrify -resize 100x100 -quality 100 -path /outputs '/input_images/*.jpg'\n")),(0,o.kt)("p",null,"The job has been submitted and Bacalhau has printed out the related job id.\nWe store that in an environment variable so that we can reuse it later on."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"%env JOB_ID=9536e23c\n!bacalhau list --id-filter=${JOB_ID}\n")),(0,o.kt)("p",null,"Since the job state is published/complete, the job result can be downloaded locally.\nWe achieve that in the next section."),(0,o.kt)("h2",{id:"get-results"},"Get results"),(0,o.kt)("p",null,"First, let us create a new directory that will store our job outputs.\nSecond, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," verb to download the job outputs into the current directory.\n",(0,o.kt)("em",{parentName:"p"},"This command prints out a number of verbose logs, although these meant for Bacalhau developers you may want to ignore them (this will soon: ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/filecoin-project/bacalhau/issues/614"},"issue #614"),").")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"!mkdir -p /tmp/img-demo\n!bacalhau get ${JOB_ID} --output-dir /tmp/img-demo\n")),(0,o.kt)("p",null,"Now, the docker run command above used the ",(0,o.kt)("inlineCode",{parentName:"p"},"outputs")," volume as a results folder so when we download them they will be stored in a homonymous folder within ",(0,o.kt)("inlineCode",{parentName:"p"},"volumes/"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"ls -l /tmp/img-demo/volumes/outputs/\n")),(0,o.kt)("h2",{id:"where-to-go-next"},"Where to go next?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../../../getting-started/workload-onboarding"},"How to run an existing workload on Bacalhau"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../../../all-flags"},"Check out the Bacalhau CLI Reference page"),".")),(0,o.kt)("h2",{id:"support"},"Support"),(0,o.kt)("p",null,"Please reach out to the ",(0,o.kt)("a",{parentName:"p",href:"https://filecoinproject.slack.com/archives/C02RLM3JHUY"},"Bacalhau team via Slack")," to seek help or in case of any issues."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"")))}m.isMDXComponent=!0},8134:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/Bacalhau_Intro_Video_thumbnail-9888836176b5ecba4f0ecca234e791b6.jpg"}}]);