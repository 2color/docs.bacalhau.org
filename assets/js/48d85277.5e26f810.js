"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[6796],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>m});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=t.createContext({}),c=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},d=function(e){var a=c(e.components);return t.createElement(i.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(i,".").concat(m)]||u[m]||p[m]||o;return n?t.createElement(h,l(l({ref:a},d),{},{components:n})):t.createElement(h,l({ref:a},d))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2565:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=n(7462),r=(n(7294),n(3905));const o={},l="Running Pandas on Bacalhau",s={unversionedId:"examples/workload-onboarding/python-pandas/index",id:"examples/workload-onboarding/python-pandas/index",title:"Running Pandas on Bacalhau",description:"Open In Colab",source:"@site/docs/examples/workload-onboarding/python-pandas/index.md",sourceDirName:"examples/workload-onboarding/python-pandas",slug:"/examples/workload-onboarding/python-pandas/",permalink:"/examples/workload-onboarding/python-pandas/",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/examples/workload-onboarding/python-pandas/index.md",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Running Rust programs as WebAssembly (WASM)",permalink:"/examples/workload-onboarding/rust-wasm/"},next:{title:"Building and Running your Custom R Containers on Bacalhau",permalink:"/examples/workload-onboarding/r-custom-docker-prophet/"}},i={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Installing and Getting Started with Pandas",id:"installing-and-getting-started-with-pandas",level:3},{value:"Installing Bacalhau",id:"installing-bacalhau",level:3},{value:"Installing IPFS",id:"installing-ipfs",level:3},{value:"<strong>Running your pandas script Locally</strong>",id:"running-your-pandas-script-locally",level:2},{value:"<strong>Importing data from CSV to DataFrame</strong>",id:"importing-data-from-csv-to-dataframe",level:4},{value:"Running the script",id:"running-the-script",level:3},{value:"<strong>Running the script on bacalhau</strong>",id:"running-the-script-on-bacalhau",level:2},{value:"Command:",id:"command",level:3}],d={toc:c};function p(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"running-pandas-on-bacalhau"},"Running Pandas on Bacalhau"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/bacalhau-project/examples/blob/main/workload-onboarding/python-pandas/index.ipynb"},(0,r.kt)("img",{parentName:"a",src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://mybinder.org/v2/gh/bacalhau-project/examples/HEAD?labpath=workload-onboarding/python-pandas/index.ipynb"},(0,r.kt)("img",{parentName:"a",src:"https://mybinder.org/badge.svg",alt:"Open In Binder"}))),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,'Pandas is a Python package that provides fast, flexible, and expressive data structures designed to make working with "relational" or "labeled" data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python. Additionally, it has the broader goal of becoming the most powerful and flexible open source data analysis/manipulation tool available in any language. It is already well on its way towards this goal.'),(0,r.kt)("h3",{id:"installing-and-getting-started-with-pandas"},"Installing and Getting Started with Pandas"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install pandas\n")),(0,r.kt)("h3",{id:"installing-bacalhau"},"Installing Bacalhau"),(0,r.kt)("p",null,"Make sure you have the latest ",(0,r.kt)("inlineCode",{parentName:"p"},"bacalhau")," client installed by following the ",(0,r.kt)("a",{parentName:"p",href:"../../../getting-started/installation"},"getting started instructions")," or using the hidden installation command below (which installs Bacalhau local to the notebook)."),(0,r.kt)("h3",{id:"installing-ipfs"},"Installing IPFS"),(0,r.kt)("p",null,"If you are going to upload your data using the IPFS CLI tool then you will need to install that. There are other methods, which you can read more about in the ",(0,r.kt)("a",{parentName:"p",href:"/examples/data-ingestion/"},"ingestion example"),"."),(0,r.kt)("h2",{id:"running-your-pandas-script-locally"},(0,r.kt)("strong",{parentName:"h2"},"Running your pandas script Locally")),(0,r.kt)("h4",{id:"importing-data-from-csv-to-dataframe"},(0,r.kt)("strong",{parentName:"h4"},"Importing data from CSV to DataFrame")),(0,r.kt)("p",null,"We can also create a DataFrame by importing a CSV file. A CSV file is a text file with one record of data per line. The values within the record are separated using the \u201ccomma\u201d character. Pandas provides a useful method, named ",(0,r.kt)("inlineCode",{parentName:"p"},"read_csv()")," to read the contents of the CSV file into a DataFrame. For example, we can create a file named \u2019",(0,r.kt)("inlineCode",{parentName:"p"},"transactions.csv"),"\u2019 containing details of Transactions. The CSV file is stored in the same directory that contains Python script."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'%%writefile read_csv.py\nimport pandas as pd\n\nprint(pd.read_csv("transactions.csv"))\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat read_csv.py\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import pandas as pd\n\nprint(pd.read_csv("transactions.csv"))\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Downloading the dataset\nwget https://cloudflare-ipfs.com/ipfs/QmfKJT13h5k1b23ja3ZCVg5nFL9oKz2bVXc8oXgtwiwhjz/transactions.csv\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"--2022-09-15 17:00:57--  https://cloudflare-ipfs.com/ipfs/QmfKJT13h5k1b23ja3ZCVg5nFL9oKz2bVXc8oXgtwiwhjz/transactions.csv\nResolving cloudflare-ipfs.com (cloudflare-ipfs.com)... 104.17.96.13, 104.17.64.14, 2606:4700::6811:600d, ...\nConnecting to cloudflare-ipfs.com (cloudflare-ipfs.com)|104.17.96.13|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1567 (1.5K) [text/csv]\nSaving to: \u2018transactions.csv\u2019\n\ntransactions.csv    100%[===================>]   1.53K  --.-KB/s    in 0s      \n\n2022-09-15 17:00:58 (37.7 MB/s) - \u2018transactions.csv\u2019 saved [1567/1567]\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat transactions.csv\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"hash,nonce,block_hash,block_number,transaction_index,from_address,to_address,value,gas,gas_price,input,block_timestamp,max_fee_per_gas,max_priority_fee_per_gas,transaction_type\n0x04cbcb236043d8fb7839e07bbc7f5eed692fb2ca55d897f1101eac3e3ad4fab8,12,0x246edb4b351d93c27926f4649bcf6c24366e2a7c7c718dc9158eea20c03bc6ae,483920,0,0x1b63142628311395ceafeea5667e7c9026c862ca,0xf4eced2f682ce333f96f2d8966c613ded8fc95dd,0,150853,50000000000,0xa9059cbb000000000000000000000000ac4df82fe37ea2187bc8c011a23d743b4f39019a00000000000000000000000000000000000000000000000000000000000186a0,1446561880,,,0\n0xcea6f89720cc1d2f46cc7a935463ae0b99dd5fad9c91bb7357de5421511cee49,84,0x246edb4b351d93c27926f4649bcf6c24366e2a7c7c718dc9158eea20c03bc6ae,483920,1,0x9b22a80d5c7b3374a05b446081f97d0a34079e7f,0xf4eced2f682ce333f96f2d8966c613ded8fc95dd,0,150853,50000000000,0xa9059cbb00000000000000000000000066f183060253cfbe45beff1e6e7ebbe318c81e560000000000000000000000000000000000000000000000000000000000030d40,1446561880,,,0\n0x463d53f0ad57677a3b430a007c1c31d15d62c37fab5eee598551697c297c235c,88,0x246edb4b351d93c27926f4649bcf6c24366e2a7c7c718dc9158eea20c03bc6ae,483920,2,0x9df428a91ff0f3635c8f0ce752933b9788926804,0x9e669f970ec0f49bb735f20799a7e7c4a1c274e2,11000440000000000,90000,50000000000,0x,1446561880,,,0\n0x05287a561f218418892ab053adfb3d919860988b19458c570c5c30f51c146f02,20085,0x246edb4b351d93c27926f4649bcf6c24366e2a7c7c718dc9158eea20c03bc6ae,483920,3,0x2a65aca4d5fc5b5c859090a6c34d164135398226,0x743b8aeedc163c0e3a0fe9f3910d146c48e70da8,1530219620000000000,90000,50000000000,0x,1446561880,,,0\n")),(0,r.kt)("h3",{id:"running-the-script"},"Running the script"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python3 read_csv.py\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"                                                hash  ...  transaction_type\n0  0x04cbcb236043d8fb7839e07bbc7f5eed692fb2ca55d8...  ...                 0\n1  0xcea6f89720cc1d2f46cc7a935463ae0b99dd5fad9c91...  ...                 0\n2  0x463d53f0ad57677a3b430a007c1c31d15d62c37fab5e...  ...                 0\n3  0x05287a561f218418892ab053adfb3d919860988b1945...  ...                 0\n\n[4 rows x 15 columns]\n")),(0,r.kt)("h2",{id:"running-the-script-on-bacalhau"},(0,r.kt)("strong",{parentName:"h2"},"Running the script on bacalhau")),(0,r.kt)("p",null,"To run pandas on bacalhau you must upload your datasets along with the script to IPFS this can be done by using the IPFS CLI to upload the files or using a pinning service like pinata or nft.storage"),(0,r.kt)("p",null,"Adding the Scripts and Datasets to IPFS\nsince we already uploaded these scripts to IPFS there is no need for you to add them"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ipfs add -r .\nadded QmPqx4BaWzAmZm4AuBqGtG6dkX7bGSVgjfgpkv2g7mi3uz pandas/read_csv.py\nadded QmYErPqtdpNTxpKot9pXR5QbhGSyaGdMFxfUwGHm4rzXzH pandas/transactions.csv\nadded QmfKJT13h5k1b23ja3ZCVg5nFL9oKz2bVXc8oXgtwiwhjz pandas\n 1.59 KiB / 1.59 KiB [===================================================================================]\n")),(0,r.kt)("p",null,"For running pandas in bacalhau you need choose a container which has python and pandas Installed"),(0,r.kt)("p",null,"Structure of the bacalhau command"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bacalhau docker run ")," similar to docker run"),(0,r.kt)("p",null,"-v mount the CID to the container this is the "),(0,r.kt)("p",null,"CID:/","<","PATH-TO-WHERE-THE-CID-IS-TO-BE-MOUNTED> ",(0,r.kt)("inlineCode",{parentName:"p"},"QmfKJT13h5k1b23ja3ZCVg5nFL9oKz2bVXc8oXgtwiwhjz:/files")),(0,r.kt)("p",null,"-w is used to set the working directory"),(0,r.kt)("p",null,"-- /bin/bash -c 'python hello.py' (Run the script)"),(0,r.kt)("h3",{id:"command"},"Command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," bacalhau  docker run \\\n--wait \\\n--id-only \\\n-v QmfKJT13h5k1b23ja3ZCVg5nFL9oKz2bVXc8oXgtwiwhjz:/files \\\n-w /files \\\namancevice/pandas \\\n-- python read_csv.py\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"e6377c99-b637-4661-a334-6ce98fcf037c\n")),(0,r.kt)("p",null,"Running the commands will output a UUID (like ",(0,r.kt)("inlineCode",{parentName:"p"},"e6377c99-b637-4661-a334-6ce98fcf037c"),"). This is the ID of the job that was created. You can check the status of the job with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau list --id-filter ${JOB_ID}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\x1b[92;100m CREATED  \x1b[0m\x1b[92;100m ID       \x1b[0m\x1b[92;100m JOB                     \x1b[0m\x1b[92;100m STATE     \x1b[0m\x1b[92;100m VERIFIED \x1b[0m\x1b[92;100m PUBLISHED               \x1b[0m\n\x1b[97;40m 17:07:18 \x1b[0m\x1b[97;40m e6377c99 \x1b[0m\x1b[97;40m Docker amancevice/pa... \x1b[0m\x1b[97;40m Published \x1b[0m\x1b[97;40m          \x1b[0m\x1b[97;40m /ipfs/bafybeihaqoxj7... \x1b[0m\n")),(0,r.kt)("p",null,'Where it says "',(0,r.kt)("inlineCode",{parentName:"p"},"Published"),'", that means the job is done, and we can get the results.'),(0,r.kt)("p",null,"If there is an error you can view the error using the following command bacalhau describe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau describe ${JOB_ID}\n")),(0,r.kt)("p",null,"Since there is no error we can\u2019t see any error instead we see the state of our job to be complete"),(0,r.kt)("p",null,"we create a temporary directory to save our results"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir pandas-results\n")),(0,r.kt)("p",null,"To Download the results of your job, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bacalhau get ${JOB_ID}  --output-dir pandas-results\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\x1b[90m17:14:05.466 |\x1b[0m \x1b[32mINF\x1b[0m \x1b[1mbacalhau/get.go:67\x1b[0m\x1b[36m >\x1b[0m Fetching results of job 'e6377c99-b637-4661-a334-6ce98fcf037c'...\n2022/09/15 17:14:06 failed to sufficiently increase receive buffer size (was: 208 kiB, wanted: 2048 kiB, got: 416 kiB). See https://github.com/lucas-clemente/quic-go/wiki/UDP-Receive-Buffer-Size for details.\n\x1b[90m17:14:16.401 |\x1b[0m \x1b[32mINF\x1b[0m \x1b[1mipfs/downloader.go:115\x1b[0m\x1b[36m >\x1b[0m Found 1 result shards, downloading to temporary folder.\n\x1b[90m17:14:21.283 |\x1b[0m \x1b[32mINF\x1b[0m \x1b[1mipfs/downloader.go:195\x1b[0m\x1b[36m >\x1b[0m Combining shard from output volume 'outputs' to final location: '/content/pandas-results'\n")),(0,r.kt)("p",null,"After the download has finished you should\nsee the following contents in pandas-results directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ls pandas-results/combined_results/\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"shards  stderr  stdout  volumes\n")),(0,r.kt)("p",null,"The structure of the files and directories will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 combined_results\n\u2502\xa0\xa0 \u251c\u2500\u2500 outputs\n\u2502\xa0\xa0 \u251c\u2500\u2500 stderr\n\u2502\xa0\xa0 \u2514\u2500\u2500 stdout\n\u251c\u2500\u2500 per_shard\n\u2502\xa0\xa0 \u2514\u2500\u2500 0_node_QmSyJ8VU\n\u2502\xa0\xa0     \u251c\u2500\u2500 exitCode\n\u2502\xa0\xa0     \u251c\u2500\u2500 outputs\n\u2502\xa0\xa0     \u251c\u2500\u2500 stderr\n\u2502\xa0\xa0     \u2514\u2500\u2500 stdout\n\u2514\u2500\u2500 raw\n    \u2514\u2500\u2500 QmY2MEETWyX77BBYBNBpUW5bjkVAyP87EotPDVW2vjHG8K\n        \u251c\u2500\u2500 exitCode\n        \u251c\u2500\u2500 outputs\n        \u251c\u2500\u2500 stderr\n        \u2514\u2500\u2500 stdout\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"stdout")," contains things printed to the console like outputs, etc.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"stderr")," contains any errors. In this case, since there are no errors, it's will be empty")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"outputs")," folder is the volume you named when you started the job with the ",(0,r.kt)("inlineCode",{parentName:"p"},"-o")," flag. In addition, you will always have a ",(0,r.kt)("inlineCode",{parentName:"p"},"outputs")," volume, which is provided by default."))),(0,r.kt)("p",null,"Because your script is printed to stdout, the output will appear in the stdout file. You can read this by typing the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat pandas-results/combined_results/stdout\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"                                                hash  ...  transaction_type\n0  0x04cbcb236043d8fb7839e07bbc7f5eed692fb2ca55d8...  ...                 0\n1  0xcea6f89720cc1d2f46cc7a935463ae0b99dd5fad9c91...  ...                 0\n2  0x463d53f0ad57677a3b430a007c1c31d15d62c37fab5e...  ...                 0\n3  0x05287a561f218418892ab053adfb3d919860988b1945...  ...                 0\n\n[4 rows x 15 columns]\n")))}p.isMDXComponent=!0}}]);