"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[903],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=l(t),d=r,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(g,i(i({ref:n},s),{},{components:t})):a.createElement(g,i({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4618:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return s},default:function(){return m}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],c={sidebar_label:"Bacalhau Create",sidebar_position:2},p="Bacalhau Create",l={unversionedId:"cli-flags/create",id:"cli-flags/create",title:"Bacalhau Create",description:"Submit a job to the network in a declarative way by writing a jobspec instead of writing a command. JSON and YAML formats are accepted.",source:"@site/docs/cli-flags/create.md",sourceDirName:"cli-flags",slug:"/cli-flags/create",permalink:"/cli-flags/create",editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/cli-flags/create.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Bacalhau Create",sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"CLI Flags",permalink:"/cli-flags/all-flags"}},s=[{value:"Usage",id:"usage",children:[],level:2},{value:"Examples",id:"examples",children:[],level:2}],u={toc:s};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"bacalhau-create"},"Bacalhau Create"),(0,o.kt)("p",null,"Submit a job to the network in a declarative way by writing a jobspec instead of writing a command. JSON and YAML formats are accepted."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"  bacalhau create FILENAME\n")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"An Example jobspec in YAML format"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1alpha1\nengine: Docker\nverifier: Ipfs\njob_spec_docker:\n  image: gromacs/gromacs\n  entrypoint:\n    - /bin/bash\n    - -c\n    - echo 15 | gmx pdb2gmx -f input/1AKI.pdb -o output/1AKI_processed.gro -water spc\n  env: []\njob_spec_language:\n  language: ''\n  language_version: ''\n  deterministic: false\n  context:\n    engine: ''\n    name: ''\n    cid: ''\n    path: ''\n  command: ''\n  program_path: ''\n  requirements_path: ''\nresources:\n  cpu: ''\n  gpu: ''\n  memory: ''\n  disk: ''\ninputs:\n  - engine: ipfs\n    name: ''\n    cid: QmeeEB1YMrG6K8z43VdsdoYmQV46gAPQCHotZs9pwusCm9\n    path: /input\n  - engine_name: urldownload\n    name: ''\n    url: https://foo.bar.io/foo_data.txt\n    path: /app/foo_data_1.txt\noutputs:\n  - engine: ipfs\n    name: output\n    cid: ''\n    path: /output\nannotations: null\n")),(0,o.kt)("p",null,"An Example jobspoec in JSON format"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "apiVersion": "v1alpha1",\n  "engine": "Docker",\n  "verifier": "Ipfs",\n  "job_spec_docker": {\n      "image": "gromacs/gromacs",\n      "entrypoint": [\n          "/bin/bash",\n          "-c",\n          "echo 15 | gmx pdb2gmx -f input/1AKI.pdb -o output/1AKI_processed.gro -water spc"\n      ],\n      "env": []\n  },\n  "job_spec_language": {\n      "language": "",\n      "language_version": "",\n      "deterministic": false,\n      "context": {\n          "engine": "",\n          "name": "",\n          "cid": "",\n          "path": ""\n      },\n      "command": "",\n      "program_path": "",\n      "requirements_path": ""\n  },\n  "resources": {\n      "cpu": "",\n      "gpu":"",\n      "memory": "",\n      "disk": ""\n  },\n  "inputs": [\n      {\n          "engine": "ipfs",\n          "name": "",\n          "cid": "QmeeEB1YMrG6K8z43VdsdoYmQV46gAPQCHotZs9pwusCm9",\n          "path": "/input"\n      }\n  ],\n  "outputs": [\n      {\n          "engine": "ipfs",\n          "name": "output",\n          "cid": "",\n          "path": "/output"\n      }\n  ],\n  \n  "annotations": null\n}\n')))}m.isMDXComponent=!0}}]);