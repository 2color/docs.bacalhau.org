"use strict";(self.webpackChunkbacalhau_docs=self.webpackChunkbacalhau_docs||[]).push([[152],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(a),h=r,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||o;return a?n.createElement(m,l(l({ref:t},c),{},{components:a})):n.createElement(m,l({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},681:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_label:"Installation",sidebar_position:1},l="Getting Started with Bacalhau",i={unversionedId:"getting-started/installation",id:"getting-started/installation",title:"Getting Started with Bacalhau",description:"In this tutorial, you'll learn how to install and run a job with the Bacalhau client.",source:"@site/docs/getting-started/installation.md",sourceDirName:"getting-started",slug:"/getting-started/installation",permalink:"/getting-started/installation",draft:!1,editUrl:"https://github.com/bacalhau-project/docs.bacalhau.org/blob/main/docs/getting-started/installation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Installation",sidebar_position:1},sidebar:"documentationSidebar",previous:{title:"Landscape",permalink:"/about-bacalhau/compute-landscape"},next:{title:"Onboard Your Workload",permalink:"/getting-started/workload-onboarding"}},s={},u=[{value:"Install the Bacalhau client",id:"install-the-bacalhau-client",level:2},{value:"Submit a &quot;Hello World&quot; job",id:"submit-a-hello-world-job",level:2},{value:"Get results",id:"get-results",level:2},{value:"Where to go next?",id:"where-to-go-next",level:2},{value:"Support",id:"support",level:2}],c={toc:u};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-bacalhau"},"Getting Started with Bacalhau"),(0,r.kt)("p",null,"In this tutorial, you'll learn how to install and run a job with the Bacalhau client. "),(0,r.kt)("h2",{id:"install-the-bacalhau-client"},"Install the Bacalhau client"),(0,r.kt)("p",null,"You can install or update the Bacalhau CLI by running the following command in a terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"curl -sL https://get.bacalhau.org/install.sh | bash\n")),(0,r.kt)("p",null,"Windows users can download the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/filecoin-project/bacalhau/releases"},"latest release tarball from Github")," and extract ",(0,r.kt)("inlineCode",{parentName:"p"},"bacalhau.exe")," to anywhere that is on the PATH."),(0,r.kt)("p",null,"Next, make sure the Bacalhau client and server versions are aligned:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f bacalhau version\nClient Version: v0.x.y\nServer Version: v0.x.y\n")),(0,r.kt)("p",null,"If you're wondering about which server is being used, the Bacalhau Project has a ",(0,r.kt)("a",{parentName:"p",href:"../about-bacalhau/introduction"},"public Bacalhau server network")," that's shared with the community. This serves to allow you to launch your jobs from your computer without maintaing whole a compute cluster on your own."),(0,r.kt)("p",null,"In this guide, we provide all commands you'll need to get you started. For a complete overview of the ",(0,r.kt)("inlineCode",{parentName:"p"},"bacalhau")," command, take a look at the ",(0,r.kt)("a",{parentName:"p",href:"../all-flags"},"CLI Reference page"),"."),(0,r.kt)("p",null,"If the client and server versions are aligned, you're ready to get started."),(0,r.kt)("h2",{id:"submit-a-hello-world-job"},'Submit a "Hello World" job'),(0,r.kt)("p",null,"The easiest way to submit a job is using the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run")," verb."),(0,r.kt)("p",null,"Let's take a quick look at its syntax: "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bacalhau docker run [FLAGS] IMAGE[:TAG] [COMMAND]")," "),(0,r.kt)("p",null,"While the command is designed to resemble Docker's run command you may be familiar with, Bacalhau introduces a whole new set of ",(0,r.kt)("a",{parentName:"p",href:"../all-flags#docker-run"},"available flags (see CLI Reference)")," to support its computing model."),(0,r.kt)("p",null,"The snipped below sumbits a job that runs an ",(0,r.kt)("inlineCode",{parentName:"p"},"echo")," program within an ",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/ubuntu"},"Ubuntu container"),". When a job is sumbitted, Bacalhau prints out the related job id:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-zsh"},"\u276f bacalhau docker run ubuntu echo Hello World\n3b39baee-5714-4f17-aa71-1f5824665ad6\n")),(0,r.kt)("p",null,"The job id above is shown in its full form. For convenience, you can use the shortened version, in this case: ",(0,r.kt)("inlineCode",{parentName:"p"},"3b39baee"),". We will store that portion of the job id in an environment variable so that we can reuse it later on."),(0,r.kt)("p",null,"After the above command is run, a job is sumbitted to the public network, which processes the job as described in the ",(0,r.kt)("a",{parentName:"p",href:"../about-bacalhau/architecture#job-lifecycle"},"Job Lifecycle page"),". To check on the current job's state,  we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," verb below. A ",(0,r.kt)("inlineCode",{parentName:"p"},"Published/Completed")," state indicates the job has completed successfully and the results are stored in the IPFS location under the ",(0,r.kt)("inlineCode",{parentName:"p"},"PUBLISHED")," column."),(0,r.kt)("p",null,"For a comprehensive list of flags you can pass to the list command check out ",(0,r.kt)("a",{parentName:"p",href:"../all-flags#list"},"the related CLI Reference page"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f export JOB_ID=3b39baee # make sure to use the right job id from the docker run command\n\n\u276f bacalhau list --id-filter=${JOB_ID}\n CREATED   ID        JOB                      STATE      VERIFIED  PUBLISHED\n 07:20:32  3b39baee  Docker ubuntu echo H...  Published            /ipfs/bafybeidu4zm6w...\n")),(0,r.kt)("h2",{id:"get-results"},"Get results"),(0,r.kt)("p",null,"After the job has finished processing, its outputs are stored on IPFS. To download outputs locally, we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," verb."),(0,r.kt)("p",null,"First, we'll create and move into a directory that will store our job outputs. Next, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," verb to download the job outputs into the current directory."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: This command prints out a number of verbose logs- these are meant for Bacalhau developers. You can safely ignore them, per ",(0,r.kt)("a",{parentName:"em",href:"https://github.com/filecoin-project/bacalhau/issues/614"},"issue #614"),").")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f mkdir -p /tmp/myfolder\n\u276f cd /tmp/myfolder\n\n\u276f bacalhau get ${JOB_ID}\n15:44:12.278 | INF bacalhau/get.go:67 > Fetching results of job '3b39baee'...\n15:44:18.463 | INF ipfs/downloader.go:115 > Found 1 result shards, downloading to temporary folder.\n15:44:21.17 | INF ipfs/downloader.go:195 > Combining shard from output volume 'outputs' to final location: '/tmp/myfolder'\n")),(0,r.kt)("p",null,"At this point, the outputs have been downloaded locally and we are ready to inspect them. Each job creates 3 useful artifacts: the ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"stderr")," files, as well as a ",(0,r.kt)("inlineCode",{parentName:"p"},"volumes/")," directory. For the scope this of this guide, we will only look at the ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout")," file, but in a real world scenario, you should also look at output data stored within the ",(0,r.kt)("inlineCode",{parentName:"p"},"volumes/")," directory. The ",(0,r.kt)("inlineCode",{parentName:"p"},"shards/")," folder can be ignored."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f ls -l\ntotal 8\ndrwxr-xr-x  3 enricorotundo  wheel  96 Sep 13 15:58 shards\n-rw-r--r--  1 enricorotundo  wheel   0 Sep 13 15:58 stderr\n-rw-r--r--  1 enricorotundo  wheel  12 Sep 13 15:58 stdout\ndrwxr-xr-x  3 enricorotundo  wheel  96 Sep 13 15:58 volumes\n")),(0,r.kt)("p",null,"We submitted a job to print a string message to a ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Standard_streams"},"standard output"),", so we have enough to now inspect the content of the related file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\u276f cat /tmp/myfolder/stdout\nHello World\n")),(0,r.kt)("p",null,"With that, you have just sucessfully run a job on the Bacalhau network! \ud83d\udc1f"),(0,r.kt)("h2",{id:"where-to-go-next"},"Where to go next?"),(0,r.kt)("p",null,"Here are a few resources that provides a deeper dive into running jobs with Bacalhau: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/getting-started/workload-onboarding"},"How to run an existing workload on Bacalhau")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/examples/data-engineering/image-processing/"},"Walk through a more data intensive demo")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/all-flags"},"Check out the Bacalhau CLI Reference page"))),(0,r.kt)("h2",{id:"support"},"Support"),(0,r.kt)("p",null,"For help with the Bacalhau client, installation, or other questions, please reach out to the ",(0,r.kt)("a",{parentName:"p",href:"https://filecoin.io/slack"},"Bacalhau team via Slack (#bacalhau channel)"),"."))}p.isMDXComponent=!0}}]);